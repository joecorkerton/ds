seaflow_21min <- read.csv("~/ds/datasci_course_materials/assignment5/seaflow_21min.csv", header=FALSE)
View(seaflow_21min)
View(seaflow_21min)
seaflow_21min <- read.csv("~/ds/datasci_course_materials/assignment5/seaflow_21min.csv")
View(seaflow_21min)
summary(seaflow_21min)
## 50% of the sample size
smp_size <- floor(0.5 * nrow(seaflow_21min))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(seaflow_21min)), size = smp_size)
train <- seaflow_21min[train_ind, ]
test <- seaflow_21min[-train_ind, ]
## 50% of the sample size
smp_size <- floor(0.5 * nrow(seaflow_21min))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(seaflow_21min)), size = smp_size)
train <- seaflow_21min[train_ind, ]
test <- seaflow_21min[-train_ind, ]
mean(train$time)
ggplot(data = train, aes(x = chl_small, y = pe)) +
geom_point(aes(colour = pop))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
seaflow_21min <- read.csv("~/ds/datasci_course_materials/assignment5/seaflow_21min.csv")
ggplot(data = train, aes(x = chl_small, y = pe)) +
geom_point(aes(colour = pop))
install.packages(rpart)
install.packages("rpart")
install.packages("caret")
install.packages("tree")
install.packages("randomForest")
install.packages("e1071")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small) #formula object
model <- rpart(fol, method="class", data=train) #Train model
print(model)
library(rpart)
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small) #formula object
model <- rpart(fol, method="class", data=train) #Train model
print(model)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small) #formula object
model <- rpart(fol, method="class", data=train) #Train model
print(model)
predict(model)
predict(model, data = test)
sum(predict(model, data = test)$pop == test%pop)
sum(predict(model, data = test)$pop == test$pop)
sum(predict(model, data = test) == test)
sum(predict(model, data = test) == test)/nrow(test)
sum(predict(model, data = test) == test)/nrow(test$pop)
sum(predict(model, data = test) == test)/nrow(test)
library(randomForest)
modelrf <- randomForest(fol, data = train)
sum(predict(modelrf, data = test) == test)/nrow(test)
modelrf <- randomForest(fol, method = "class", data = train)
sum(predict(modelrf, data = test) == test)/nrow(test)
modelrf <- randomForest(fol, method = "class", data = train)
print(modelrf)
#sum(predict(modelrf, data = test) == test)/nrow(test)
predict(modelrf, data = test)
sum(predict(modelrf, data = test) == test$pop)/nrow(test)
sum(predict(modelrf, data = test) == test)/nrow(test)
nrow(predict(modelrf, data = test))
head(predict(modelrf, data = test))
View(test)
predict.randomForest(modelrf, data = test)
head(predict(modelrf, data = test))
tail(predict(modelrf, data = test))
print(modelrf)
Nth.delete(predict(modelrf, data = test), 2)
result <- predict(modelrf, data = test)
result
result[0,1]
result[0]
resut[1]
result[1]
result[2]
train[3]
View(train)
View(train)
train["pop"]
sum(predict(model, data = test)) == test)/nrow(test)
sum(predict(modelrf, data = test) == test["pop"])/nrow(test)
print(modelrf)
which(predict(modelrf, data = test) %in% test)
which(predict(modelrf, data = test) %in% test$pop)
which(predict(modelrf, data = test) %in% test["pop"])
which(predict(modelrf, data = test), test["pop"])
sum(predict(modelrf, data = test) == test)/nrow(test)
importance(modelrf)
library(e1071)
modele <- svm(fol, data=train)
print(modele)
sum(predict(modele, data = test) == test)/nrow(test)
sum(as.character(predict(modelrf, data = test)) == test["pop"])/nrow(test)
sum(as.character(predict(modele, data = test)) == test["pop"])/nrow(test)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small) #formula object
model <- rpart(fol, method="class", data=train) #Train model
print(model)
table(pred = predict(model, data = test), true = testingdata$pop)
table(pred = predict(model, data = test), true = test$pop)
table(pred = predict(model, data = test), true = test["pop"])
table(pred = predict(model, data = test), true = test)
table(pred = predict(model, data = test)[-1], true = test$pop)
table(pred = predict(model, data = test)[,-1], true = test$pop)
length(predict(model, data = test))
length(test)
table(pred = predict(modelrf, data = test), true = test$pop)
table(pred = as.character(predict(modelrf, data = test)), true = test$pop)
table(pred = as.character(predict(modele, data = test)), true = test$pop)
table(pred = predict(modele, data = test), true = test$pop)
print(modelrf)
ggplot(data = train, aes(x = chl_big, y = time)) +
geom_point(aes(colour = pop))
library(ggplot2)
ggplot(data = train, aes(x = chl_big, y = time)) +
geom_point(aes(colour = pop))
removed <- seaflow_21min[seaflow_21min$file_id != 208]
removed <- seaflow_21min[seaflow_21min["file_id"] != 208]
removed <- seaflow_21min[! seaflow_21min$file_id == 208]
removed <- seaflow_21min[! seaflow_21min$file_id = 208]
removed <- seaflow_21min$*[! seaflow_21min$file_id == 208]
removed <- seaflow_21min[file_id != 208]
removed <- seaflow_21min["file_id" != 208]
modelrepeat <- svm(fol, data=train)
modelrepeat <- svm(fol, data=removed)
smp_sizer <- floor(0.5 * nrow(removed))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(removed)), size = smp_size)
trainr <- removed[train_ind, ]
testr <- removed[-train_ind, ]
modelrepeat <- svm(fol, data=trainr)
sum(as.character(predict(modelrepeat, data = testr)) == testr["pop"])/nrow(testr)
sum(as.character(predict(modele, data = test)) == test["pop"])/nrow(test)
sum(predict(model, data = test) == test["pop"])/nrow(test)
View(removed)
removed <- seaflow_21min[! "file_id" == 208]
View(removed)
removed <- seaflow_21min[! ("file_id" == 208)]
View(removed)
removed <- seaflow_21min["file_id" == 208]
View(removed)
removed <- seaflow_21min["file_id" == "208"]
View(removed)
removed <- seaflow_21min["file_id" = 208]
removed <- seaflow_21min[seaflow_21min$file_id == 208]
removed <- seaflow_21min$[seaflow_21min$file_id == 208]
removed <- seaflow_21min$file_id[seaflow_21min$file_id == 208]
removed <- seaflow_21min$file_id[! seaflow_21min$file_id == 208]
removed <- seaflow_21min$file_id,fsc_small[! seaflow_21min$file_id == 208]
removed <- seaflow_21min[! seaflow_21min$file_id == 208]
removed <- seaflow_21min[! ("file_id" == 208), ]
View(removed)
removed <- seaflow_21min[! (seaflow_21min$file_id == 208), ]
ggplot(data = train, aes(x = chl_big, y = time)) +
geom_point(aes(colour = pop))
#Remove data with file_id 208
removed <- seaflow_21min[! (seaflow_21min$file_id == 208), ]
#Repeat SVM modeling
## 50% of the sample size
smp_sizer <- floor(0.5 * nrow(removed))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(removed)), size = smp_size)
trainr <- removed[train_ind, ]
testr <- removed[-train_ind, ]
modelrepeat <- svm(fol, data=trainr)
sum(as.character(predict(modelrepeat, data = testr)) == testr["pop"])/nrow(testr)
ggplot(data = train, aes(x = chl_big, y = time)) +
geom_point(aes(colour = pop))
#Remove data with file_id 208
removed <- seaflow_21min[! (seaflow_21min$file_id == 208), ]
#Repeat SVM modeling
## 50% of the sample size
smp_sizer <- floor(0.5 * nrow(removed))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(removed)), size = smp_sizer)
trainr <- removed[train_ind, ]
testr <- removed[-train_ind, ]
modelrepeat <- svm(fol, data=trainr)
sum(as.character(predict(modelrepeat, data = testr)) == testr["pop"])/nrow(testr)
ggplot(data = train, aes(x = chl_big, y = time)) +
geom_point(aes(colour = pop))
#Remove data with file_id 208
removed <- seaflow_21min[! (seaflow_21min$file_id == 208), ]
#Repeat SVM modeling
## 50% of the sample size
smp_sizer <- floor(0.5 * nrow(removed))
## set the seed to make your partition reproductible
set.seed(123)
train_indr <- sample(seq_len(nrow(removed)), size = smp_sizer)
trainr <- removed[train_indr, ]
testr <- removed[-train_indr, ]
modelrepeat <- svm(fol, data=trainr)
sum(as.character(predict(modelrepeat, data = testr)) == testr["pop"])/nrow(testr)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small) #formula object
model <- rpart(fol, method="class", data=train) #Train model
print(model)
sum(predict(model, data = test) == test$pop)/nrow(test)
sum(predict(model, data = test) == test["pop"])/nrow(test)
sum(predict(model, data = test) == test["pop"])/nrow(test)
sum(as.character(predict(model, data = test) == test["pop"]))/nrow(test)
sum(predict(model, data = test) == test)/nrow(test)
sum(predict(model, data = test) == test)/nrow(test)
